sud_board = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 6],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

#backtracking function
def solve(board):

    find = find_empty(board)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(board, i, (row, col)):
            board[row][col] = i
            
            if solve(board):
                return True
            
            board[row][col] = 0
            
    return False


#Finds a number that fits
def valid(board, number, position):                         
    #checking row
    for i in range(len(board[0])):
        if board[position[0]][i] == number and position[1] != i:
            return False
        
    #Checking column
    for i in range(len(board)):
        if board[i][position[1]] == number and position[0] != i:
            return False
        
    #Check Box
    box_x = position[1] // 3
    box_y = position[0] // 3
    
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == number and (i,j) != position:
                return False
            
    return True

#This function will display the game board in the terminal
def print_board(board): 
    for horizontal in range(len(board)):                    #This for loop prints horizontal line every third row
        if horizontal % 3 == 0 and horizontal != 0:
            print ("- - - - - - - - - - - - -")             

        for vertical in range(len(board[0])):               #Every position in row will check if it is the third element and the next vertical line will be drawn
            if vertical % 3 == 0 and vertical != 0:
                print(" | ", end = "")                      
                
            if vertical == 8:
                print(board[horizontal][vertical])
            else:
                print(str(board[horizontal][vertical]) + " ", end= "")
            
#This function finds empty spaces on the board
def find_empty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)                            
        
    return None


print_board(sud_board)
solve(sud_board)
print("_______________________")
print_board(sud_board)
